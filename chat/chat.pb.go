// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package chat

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Body                 string   `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type Instruction struct {
	IpAddress            string   `protobuf:"bytes,1,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Instruction) Reset()         { *m = Instruction{} }
func (m *Instruction) String() string { return proto.CompactTextString(m) }
func (*Instruction) ProtoMessage()    {}
func (*Instruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{1}
}

func (m *Instruction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instruction.Unmarshal(m, b)
}
func (m *Instruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instruction.Marshal(b, m, deterministic)
}
func (m *Instruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instruction.Merge(m, src)
}
func (m *Instruction) XXX_Size() int {
	return xxx_messageInfo_Instruction.Size(m)
}
func (m *Instruction) XXX_DiscardUnknown() {
	xxx_messageInfo_Instruction.DiscardUnknown(m)
}

var xxx_messageInfo_Instruction proto.InternalMessageInfo

func (m *Instruction) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *Instruction) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *Instruction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CalculateBeatsPerMinuteRequest struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Value                uint32   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Minute               uint32   `protobuf:"varint,3,opt,name=minute,proto3" json:"minute,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculateBeatsPerMinuteRequest) Reset()         { *m = CalculateBeatsPerMinuteRequest{} }
func (m *CalculateBeatsPerMinuteRequest) String() string { return proto.CompactTextString(m) }
func (*CalculateBeatsPerMinuteRequest) ProtoMessage()    {}
func (*CalculateBeatsPerMinuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{2}
}

func (m *CalculateBeatsPerMinuteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculateBeatsPerMinuteRequest.Unmarshal(m, b)
}
func (m *CalculateBeatsPerMinuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculateBeatsPerMinuteRequest.Marshal(b, m, deterministic)
}
func (m *CalculateBeatsPerMinuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateBeatsPerMinuteRequest.Merge(m, src)
}
func (m *CalculateBeatsPerMinuteRequest) XXX_Size() int {
	return xxx_messageInfo_CalculateBeatsPerMinuteRequest.Size(m)
}
func (m *CalculateBeatsPerMinuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateBeatsPerMinuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateBeatsPerMinuteRequest proto.InternalMessageInfo

func (m *CalculateBeatsPerMinuteRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *CalculateBeatsPerMinuteRequest) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CalculateBeatsPerMinuteRequest) GetMinute() uint32 {
	if m != nil {
		return m.Minute
	}
	return 0
}

type CalculateBeatsPerMinuteResponse struct {
	Average              float32  `protobuf:"fixed32,1,opt,name=average,proto3" json:"average,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculateBeatsPerMinuteResponse) Reset()         { *m = CalculateBeatsPerMinuteResponse{} }
func (m *CalculateBeatsPerMinuteResponse) String() string { return proto.CompactTextString(m) }
func (*CalculateBeatsPerMinuteResponse) ProtoMessage()    {}
func (*CalculateBeatsPerMinuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{3}
}

func (m *CalculateBeatsPerMinuteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculateBeatsPerMinuteResponse.Unmarshal(m, b)
}
func (m *CalculateBeatsPerMinuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculateBeatsPerMinuteResponse.Marshal(b, m, deterministic)
}
func (m *CalculateBeatsPerMinuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateBeatsPerMinuteResponse.Merge(m, src)
}
func (m *CalculateBeatsPerMinuteResponse) XXX_Size() int {
	return xxx_messageInfo_CalculateBeatsPerMinuteResponse.Size(m)
}
func (m *CalculateBeatsPerMinuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateBeatsPerMinuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateBeatsPerMinuteResponse proto.InternalMessageInfo

func (m *CalculateBeatsPerMinuteResponse) GetAverage() float32 {
	if m != nil {
		return m.Average
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "chat.Message")
	proto.RegisterType((*Instruction)(nil), "chat.Instruction")
	proto.RegisterType((*CalculateBeatsPerMinuteRequest)(nil), "chat.CalculateBeatsPerMinuteRequest")
	proto.RegisterType((*CalculateBeatsPerMinuteResponse)(nil), "chat.CalculateBeatsPerMinuteResponse")
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_8c585a45e2093e54) }

var fileDescriptor_8c585a45e2093e54 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x14, 0x6c, 0x6a, 0x6d, 0xed, 0x6b, 0x2b, 0xb8, 0x88, 0x86, 0xe2, 0x17, 0x41, 0xa1, 0x78, 0x28,
	0x52, 0x2f, 0x8a, 0x27, 0xed, 0xa5, 0x1e, 0x0a, 0x25, 0xf9, 0x05, 0xaf, 0xc9, 0xa3, 0x8d, 0x24,
	0xd9, 0xb8, 0xfb, 0xb6, 0x50, 0x7f, 0xbd, 0x64, 0x93, 0xa0, 0x22, 0xd5, 0xdb, 0xcc, 0xf0, 0x66,
	0x26, 0x19, 0x16, 0x20, 0x5c, 0x23, 0x8f, 0x73, 0x25, 0x59, 0x8a, 0x56, 0x81, 0xbd, 0x73, 0xe8,
	0xcc, 0x49, 0x6b, 0x5c, 0x91, 0x10, 0xd0, 0x5a, 0xca, 0x68, 0xeb, 0x3a, 0x57, 0xce, 0xa8, 0xeb,
	0x5b, 0xec, 0x05, 0xd0, 0x7b, 0xcd, 0x34, 0x2b, 0x13, 0x72, 0x2c, 0x33, 0x71, 0x06, 0xdd, 0x38,
	0x7f, 0x8e, 0x22, 0x45, 0x5a, 0x57, 0x77, 0x5f, 0x42, 0x11, 0x90, 0x4b, 0xc5, 0x6e, 0xb3, 0x0c,
	0x28, 0x70, 0xa1, 0x65, 0x98, 0x92, 0xbb, 0x57, 0x6a, 0x05, 0xf6, 0x96, 0x70, 0x31, 0xc5, 0x24,
	0x34, 0x09, 0x32, 0xbd, 0x10, 0xb2, 0x5e, 0x90, 0x9a, 0xc7, 0x99, 0x61, 0xf2, 0xe9, 0xdd, 0x90,
	0xb6, 0x2e, 0x63, 0xe2, 0xa8, 0xfe, 0x94, 0x02, 0x8b, 0x63, 0xd8, 0xdf, 0x60, 0x62, 0xc8, 0xc6,
	0x0f, 0xfc, 0x92, 0x88, 0x13, 0x68, 0xa7, 0xd6, 0x6a, 0x1b, 0x06, 0x7e, 0xc5, 0xbc, 0x27, 0xb8,
	0xdc, 0xd9, 0xa1, 0x73, 0x99, 0x69, 0x12, 0x2e, 0x74, 0x70, 0x43, 0x0a, 0x57, 0x64, 0x7b, 0x9a,
	0x7e, 0x4d, 0x27, 0x8f, 0xd0, 0x9b, 0xae, 0x91, 0x03, 0x52, 0x9b, 0x38, 0x24, 0x71, 0x0b, 0x07,
	0x01, 0x6e, 0x67, 0x94, 0x24, 0x52, 0x0c, 0xc6, 0x76, 0xc2, 0x6a, 0xb3, 0xe1, 0x4f, 0xea, 0x35,
	0x26, 0x33, 0xe8, 0xfb, 0xd2, 0x30, 0xd5, 0xde, 0x07, 0x38, 0x0c, 0x28, 0x8b, 0x16, 0xa8, 0x30,
	0x25, 0x26, 0xa5, 0xc5, 0x51, 0x69, 0xf9, 0x36, 0xeb, 0xf0, 0xb7, 0xe4, 0x35, 0x26, 0x1f, 0xd0,
	0x0f, 0x58, 0x61, 0x5a, 0x27, 0xbd, 0xc1, 0xe9, 0x8e, 0x3f, 0x12, 0xd7, 0xa5, 0xff, 0xef, 0x51,
	0x87, 0x37, 0xff, 0x5c, 0x95, 0xb3, 0x8c, 0x9c, 0x3b, 0x67, 0xd9, 0xb6, 0x4f, 0xe4, 0xfe, 0x33,
	0x00, 0x00, 0xff, 0xff, 0x17, 0x1f, 0x21, 0x5f, 0x30, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.ChatService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	SayHello(context.Context, *Message) (*Message, error)
}

// UnimplementedChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (*UnimplementedChatServiceServer) SayHello(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SayHello(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ChatService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}

// RouteServiceClient is the client API for RouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouteServiceClient interface {
	SendParameters(ctx context.Context, in *Instruction, opts ...grpc.CallOption) (*Instruction, error)
}

type routeServiceClient struct {
	cc *grpc.ClientConn
}

func NewRouteServiceClient(cc *grpc.ClientConn) RouteServiceClient {
	return &routeServiceClient{cc}
}

func (c *routeServiceClient) SendParameters(ctx context.Context, in *Instruction, opts ...grpc.CallOption) (*Instruction, error) {
	out := new(Instruction)
	err := c.cc.Invoke(ctx, "/chat.RouteService/SendParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteServiceServer is the server API for RouteService service.
type RouteServiceServer interface {
	SendParameters(context.Context, *Instruction) (*Instruction, error)
}

// UnimplementedRouteServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRouteServiceServer struct {
}

func (*UnimplementedRouteServiceServer) SendParameters(ctx context.Context, req *Instruction) (*Instruction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendParameters not implemented")
}

func RegisterRouteServiceServer(s *grpc.Server, srv RouteServiceServer) {
	s.RegisterService(&_RouteService_serviceDesc, srv)
}

func _RouteService_SendParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instruction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).SendParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RouteService/SendParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).SendParameters(ctx, req.(*Instruction))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.RouteService",
	HandlerType: (*RouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendParameters",
			Handler:    _RouteService_SendParameters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}

// StramServiceClient is the client API for StramService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StramServiceClient interface {
	CalculateBeatsPerMinute(ctx context.Context, opts ...grpc.CallOption) (StramService_CalculateBeatsPerMinuteClient, error)
}

type stramServiceClient struct {
	cc *grpc.ClientConn
}

func NewStramServiceClient(cc *grpc.ClientConn) StramServiceClient {
	return &stramServiceClient{cc}
}

func (c *stramServiceClient) CalculateBeatsPerMinute(ctx context.Context, opts ...grpc.CallOption) (StramService_CalculateBeatsPerMinuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StramService_serviceDesc.Streams[0], "/chat.StramService/CalculateBeatsPerMinute", opts...)
	if err != nil {
		return nil, err
	}
	x := &stramServiceCalculateBeatsPerMinuteClient{stream}
	return x, nil
}

type StramService_CalculateBeatsPerMinuteClient interface {
	Send(*CalculateBeatsPerMinuteRequest) error
	Recv() (*CalculateBeatsPerMinuteResponse, error)
	grpc.ClientStream
}

type stramServiceCalculateBeatsPerMinuteClient struct {
	grpc.ClientStream
}

func (x *stramServiceCalculateBeatsPerMinuteClient) Send(m *CalculateBeatsPerMinuteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stramServiceCalculateBeatsPerMinuteClient) Recv() (*CalculateBeatsPerMinuteResponse, error) {
	m := new(CalculateBeatsPerMinuteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StramServiceServer is the server API for StramService service.
type StramServiceServer interface {
	CalculateBeatsPerMinute(StramService_CalculateBeatsPerMinuteServer) error
}

// UnimplementedStramServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStramServiceServer struct {
}

func (*UnimplementedStramServiceServer) CalculateBeatsPerMinute(srv StramService_CalculateBeatsPerMinuteServer) error {
	return status.Errorf(codes.Unimplemented, "method CalculateBeatsPerMinute not implemented")
}

func RegisterStramServiceServer(s *grpc.Server, srv StramServiceServer) {
	s.RegisterService(&_StramService_serviceDesc, srv)
}

func _StramService_CalculateBeatsPerMinute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StramServiceServer).CalculateBeatsPerMinute(&stramServiceCalculateBeatsPerMinuteServer{stream})
}

type StramService_CalculateBeatsPerMinuteServer interface {
	Send(*CalculateBeatsPerMinuteResponse) error
	Recv() (*CalculateBeatsPerMinuteRequest, error)
	grpc.ServerStream
}

type stramServiceCalculateBeatsPerMinuteServer struct {
	grpc.ServerStream
}

func (x *stramServiceCalculateBeatsPerMinuteServer) Send(m *CalculateBeatsPerMinuteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stramServiceCalculateBeatsPerMinuteServer) Recv() (*CalculateBeatsPerMinuteRequest, error) {
	m := new(CalculateBeatsPerMinuteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StramService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.StramService",
	HandlerType: (*StramServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CalculateBeatsPerMinute",
			Handler:       _StramService_CalculateBeatsPerMinute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
